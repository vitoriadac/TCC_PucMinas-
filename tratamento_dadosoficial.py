# -*- coding: utf-8 -*-
"""Tratamento_DadosOFICIAL.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nNftpUB0R5q0mGVV6G9atnsVoOyR2rQ1
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
from datetime import datetime as dt
import itertools

# %matplotlib inline

# Importando arquivo direto do Google Drive
from google.colab import drive

drive.mount('/content/drive')

# Transformando os dados coletados em um DataFrame

drive = '/content/drive/My Drive/'

dados_2 = pd.read_csv(drive + '2001.csv')
dados_3 = pd.read_csv(drive + '2002.csv')
dados_4 = pd.read_csv(drive + '2003.csv')
dados_5 = pd.read_csv(drive + '2005.csv')
dados_6 = pd.read_csv(drive + '2006.csv')
dados_7 = pd.read_csv(drive + '2007.csv')
dados_8 = pd.read_csv(drive + '2008.csv')
dados_9 = pd.read_csv(drive + '2009.csv')
dados_10 = pd.read_csv(drive + '2010.csv')
dados_11 = pd.read_csv(drive + '2011.csv')
dados_12 = pd.read_csv(drive + '2012.csv')
dados_13 = pd.read_csv(drive + '2013.csv')
dados_14 = pd.read_csv(drive + '2014.csv')
dados_15 = pd.read_csv(drive + '2015.csv')
dados_16 = pd.read_csv(drive + '2016.csv')
dados_17 = pd.read_csv(drive + '2017.csv')
dados_18 = pd.read_csv(drive + '2018.csv')
dados_19 = pd.read_csv(drive + '2019.csv')

# dados_2.head()

# Transformando a variável data (str) em date

# Ano em 2 dígitos - ex: 00
def transf_data(data):
    if data == '':
        return None
    else:
        return dt.strptime(data, '%d/%m/%y').date()
    

# Ano em 4 dígitos - ex: 2000
def transf_data_2(data):
    if data == '':
        return None
    else:
        return dt.strptime(data, '%d/%m/%Y').date()

dados_2.Date = dados_2.Date.apply(transf_data)    
dados_3.Date = dados_3.Date.apply(transf_data)        
dados_4.Date = dados_4.Date.apply(transf_data)    
dados_5.Date = dados_5.Date.apply(transf_data)    
dados_6.Date = dados_6.Date.apply(transf_data)    
dados_7.Date = dados_7.Date.apply(transf_data)    
dados_8.Date = dados_8.Date.apply(transf_data)    
dados_9.Date = dados_9.Date.apply(transf_data)    
dados_10.Date = dados_10.Date.apply(transf_data)
dados_11.Date = dados_11.Date.apply(transf_data)
dados_12.Date = dados_12.Date.apply(transf_data)
dados_13.Date = dados_13.Date.apply(transf_data)
dados_14.Date = dados_14.Date.apply(transf_data)
dados_15.Date = dados_15.Date.apply(transf_data)
dados_16.Date = dados_16.Date.apply(transf_data)
dados_17.Date = dados_17.Date.apply(transf_data)
dados_18.Date = dados_18.Date.apply(transf_data_2)
dados_19.Date = dados_19.Date.apply(transf_data_2)



# Coletar as estatisticas relacionadas ao jogo     
colunas_imp = ['Date','HomeTeam','AwayTeam','FTHG','FTAG','FTR']

estatistica_jogo_2 = dados_2[colunas_imp]
estatistica_jogo_3 = dados_3[colunas_imp]
estatistica_jogo_4 = dados_4[colunas_imp]
estatistica_jogo_5 = dados_5[colunas_imp]
estatistica_jogo_6 = dados_6[colunas_imp]
estatistica_jogo_7 = dados_7[colunas_imp]
estatistica_jogo_8 = dados_8[colunas_imp]
estatistica_jogo_9 = dados_9[colunas_imp]
estatistica_jogo_10 = dados_10[colunas_imp]
estatistica_jogo_11 = dados_11[colunas_imp]   
estatistica_jogo_12 = dados_12[colunas_imp]
estatistica_jogo_13 = dados_13[colunas_imp]
estatistica_jogo_14 = dados_14[colunas_imp]
estatistica_jogo_15 = dados_15[colunas_imp]
estatistica_jogo_16 = dados_16[colunas_imp]
estatistica_jogo_17 = dados_17[colunas_imp]
estatistica_jogo_18 = dados_18[colunas_imp]
estatistica_jogo_19 = dados_19[colunas_imp]

estatistica_jogo_10.head()

# Gols feitos por time e por partida 
def gols_feitos(estatisticas):
    times = {}
    for i in estatisticas.groupby('HomeTeam').mean().T.columns:
        times[i] = []
    
    for i in range(len(estatisticas)):
        HTGS = estatisticas.iloc[i]['FTHG']
        ATGS = estatisticas.iloc[i]['FTAG']
        times[estatisticas.iloc[i].HomeTeam].append(HTGS)
        times[estatisticas.iloc[i].AwayTeam].append(ATGS)
    
    gols = pd.DataFrame(data=times, index = [i for i in range(1,39)]).T
    gols[0] = 0
    for i in range(2,39):
        gols[i] = gols[i] + gols[i-1]
    return gols



# Gols que foram tomados organizados por times e partidas 
def gols_tomados(estatisticas):
    times = {}
    for i in estatisticas.groupby('HomeTeam').mean().T.columns:
        times[i] = []
    
    for i in range(len(estatisticas)):
        ATGC = estatisticas.iloc[i]['FTHG']
        HTGC = estatisticas.iloc[i]['FTAG']
        times[estatisticas.iloc[i].HomeTeam].append(HTGC)
        times[estatisticas.iloc[i].AwayTeam].append(ATGC)
    
    gols_2 = pd.DataFrame(data=times, index = [i for i in range(1,39)]).T
    gols_2[0] = 0
    for i in range(2,39):
        gols_2[i] = gols_2[i] + gols_2[i-1]
    return gols_2

def gols_partidas(estatisticas):
    GC = gols_tomados(estatisticas)
    GS = gols_feitos(estatisticas)
   
    j = 0
    HTGS = []
    ATGS = []
    HTGC = []
    ATGC = []

    for i in range(380):
        ht = estatisticas.iloc[i].HomeTeam
        at = estatisticas.iloc[i].AwayTeam
        HTGS.append(GS.loc[ht][j])
        ATGS.append(GS.loc[at][j])
        HTGC.append(GC.loc[ht][j])
        ATGC.append(GC.loc[at][j])
        
        if ((i + 1)% 10) == 0:
            j = j + 1
        
    estatisticas['HTGS'] = HTGS
    estatisticas['ATGS'] = ATGS
    estatisticas['HTGC'] = HTGC
    estatisticas['ATGC'] = ATGC
    
    return estatisticas


# Adicionar ao DataFrame
estatistica_jogo_2 = gols_partidas(estatistica_jogo_2)
estatistica_jogo_3 = gols_partidas(estatistica_jogo_3)
estatistica_jogo_4 = gols_partidas(estatistica_jogo_4)
estatistica_jogo_5 = gols_partidas(estatistica_jogo_5)
estatistica_jogo_6 = gols_partidas(estatistica_jogo_6)
estatistica_jogo_7 = gols_partidas(estatistica_jogo_7)
estatistica_jogo_8 = gols_partidas(estatistica_jogo_8)
estatistica_jogo_9 = gols_partidas(estatistica_jogo_9)
estatistica_jogo_10 = gols_partidas(estatistica_jogo_10)
estatistica_jogo_11 = gols_partidas(estatistica_jogo_11)
estatistica_jogo_12 = gols_partidas(estatistica_jogo_12)
estatistica_jogo_13 = gols_partidas(estatistica_jogo_13)
estatistica_jogo_14 = gols_partidas(estatistica_jogo_14)
estatistica_jogo_15 = gols_partidas(estatistica_jogo_15)
estatistica_jogo_16 = gols_partidas(estatistica_jogo_16)
estatistica_jogo_17 = gols_partidas(estatistica_jogo_17)
estatistica_jogo_18 = gols_partidas(estatistica_jogo_18)
estatistica_jogo_19 = gols_partidas(estatistica_jogo_19)

estatistica_jogo_10.head()

# 'W' = Vitória; 'L'= Derrota; 'D'= Empate 
def pontos(resultado):
    if resultado == 'W':
        return 3
    elif resultado == 'D':
        return 1
    else:
        return 0
    

def pontos_acumulados(partida_res):
    pontos_partida = partida_res.applymap(pontos)
    for i in range(2,39):
        pontos_partida[i] = pontos_partida[i] + pontos_partida[i-1]
        
    pontos_partida.insert(column =0, loc = 0, value = [0*i for i in range(20)])
    return pontos_partida


def resultado_partida(estatisticas):
    times = {}
    for i in estatisticas.groupby('HomeTeam').mean().T.columns:
        times[i] = []

    for i in range(len(estatisticas)):
        if estatisticas.iloc[i].FTR == 'H':
            times[estatisticas.iloc[i].HomeTeam].append('W')
            times[estatisticas.iloc[i].AwayTeam].append('L')
        elif estatisticas.iloc[i].FTR == 'A':
            times[estatisticas.iloc[i].AwayTeam].append('W')
            times[estatisticas.iloc[i].HomeTeam].append('L')
        else:
            times[estatisticas.iloc[i].AwayTeam].append('D')
            times[estatisticas.iloc[i].HomeTeam].append('D')
            
    return pd.DataFrame(data=times, index = [i for i in range(1,39)]).T

def pontos_totais(estatisticas):
    partida_res = resultado_partida(estatisticas)
    cum_pts = pontos_acumulados(partida_res)
    HTP = []
    ATP = []
    j = 0
    for i in range(380):
        ht = estatisticas.iloc[i].HomeTeam
        at = estatisticas.iloc[i].AwayTeam
        HTP.append(cum_pts.loc[ht][j])
        ATP.append(cum_pts.loc[at][j])

        if ((i + 1)% 10) == 0:
            j = j + 1
            
    estatisticas['HTP'] = HTP
    estatisticas['ATP'] = ATP
    return estatisticas
    
# Adicionar ao DataFrame
estatistica_jogo_2 = pontos_totais(estatistica_jogo_2)
estatistica_jogo_3 = pontos_totais(estatistica_jogo_3)
estatistica_jogo_4 = pontos_totais(estatistica_jogo_4)
estatistica_jogo_5 = pontos_totais(estatistica_jogo_5)
estatistica_jogo_6 = pontos_totais(estatistica_jogo_6)
estatistica_jogo_7 = pontos_totais(estatistica_jogo_7)
estatistica_jogo_8 = pontos_totais(estatistica_jogo_8)
estatistica_jogo_9 = pontos_totais(estatistica_jogo_9)
estatistica_jogo_10 = pontos_totais(estatistica_jogo_10)
estatistica_jogo_11 = pontos_totais(estatistica_jogo_11)
estatistica_jogo_12 = pontos_totais(estatistica_jogo_12)
estatistica_jogo_13 = pontos_totais(estatistica_jogo_13)
estatistica_jogo_14 = pontos_totais(estatistica_jogo_14)
estatistica_jogo_15 = pontos_totais(estatistica_jogo_15)
estatistica_jogo_16 = pontos_totais(estatistica_jogo_16)
estatistica_jogo_17 = pontos_totais(estatistica_jogo_17)
estatistica_jogo_18 = pontos_totais(estatistica_jogo_18)
estatistica_jogo_19 = pontos_totais(estatistica_jogo_19)

estatistica_jogo_10.head()

def form_func(estatisticas,num):
    form = resultado_partida(estatisticas)
    form_final = form.copy()
    for i in range(num,39):
        form_final[i] = ''
        j = 0
        while j < num:
            form_final[i] += form[i-j]
            j += 1           
    return form_final

def add_form(estatisticas,num):
    form = form_func(estatisticas,num)
    h = ['M' for i in range(num * 10)]  
    a = ['M' for i in range(num * 10)]
    
    j = num
    for i in range((num*10),380):
        ht = estatisticas.iloc[i].HomeTeam
        at = estatisticas.iloc[i].AwayTeam
        
        past = form.loc[ht][j]              
        h.append(past[num-1])                    
        
        past = form.loc[at][j]              
        a.append(past[num-1])                   
        
        if ((i + 1)% 10) == 0:
            j = j + 1

    estatisticas['HM' + str(num)] = h                 
    estatisticas['AM' + str(num)] = a

    
    return estatisticas


def add_form_df(estatistica_jogo):
    estatistica_jogo = add_form(estatistica_jogo,1)
    estatistica_jogo = add_form(estatistica_jogo,2)
    estatistica_jogo = add_form(estatistica_jogo,3)
    estatistica_jogo = add_form(estatistica_jogo,4)
    estatistica_jogo = add_form(estatistica_jogo,5)
    return estatistica_jogo    
    
# Adicionar mudanças ao DataFrame
estatistica_jogo_2 = add_form_df(estatistica_jogo_2)
estatistica_jogo_3 = add_form_df(estatistica_jogo_3)
estatistica_jogo_4 = add_form_df(estatistica_jogo_4)
estatistica_jogo_5 = add_form_df(estatistica_jogo_5)
estatistica_jogo_6 = add_form_df(estatistica_jogo_6)
estatistica_jogo_7 = add_form_df(estatistica_jogo_7)
estatistica_jogo_8 = add_form_df(estatistica_jogo_8)
estatistica_jogo_9 = add_form_df(estatistica_jogo_9)
estatistica_jogo_10 = add_form_df(estatistica_jogo_10)
estatistica_jogo_11 = add_form_df(estatistica_jogo_11)
estatistica_jogo_12 = add_form_df(estatistica_jogo_12)
estatistica_jogo_13 = add_form_df(estatistica_jogo_13)
estatistica_jogo_14 = add_form_df(estatistica_jogo_14)
estatistica_jogo_15 = add_form_df(estatistica_jogo_15)    
estatistica_jogo_16 = add_form_df(estatistica_jogo_16)
estatistica_jogo_17 = add_form_df(estatistica_jogo_17)
estatistica_jogo_18 = add_form_df(estatistica_jogo_18)
estatistica_jogo_19 = add_form_df(estatistica_jogo_19)    

estatistica_jogo_10.head()

# Organizando as colunas 
cols = ['Date', 'HomeTeam', 'AwayTeam', 'FTHG', 'FTAG', 'FTR', 'HTGS', 'ATGS', 'HTGC', 'ATGC', 'HTP', 'ATP', 'HM1', 'HM2', 'HM3',
        'HM4', 'HM5', 'AM1', 'AM2', 'AM3', 'AM4', 'AM5' ]

estatistica_jogo_2 = estatistica_jogo_2[cols]
estatistica_jogo_3 = estatistica_jogo_3[cols]
estatistica_jogo_4 = estatistica_jogo_4[cols]
estatistica_jogo_5 = estatistica_jogo_5[cols]
estatistica_jogo_6 = estatistica_jogo_6[cols]
estatistica_jogo_7 = estatistica_jogo_7[cols]
estatistica_jogo_8 = estatistica_jogo_8[cols]
estatistica_jogo_9 = estatistica_jogo_9[cols]
estatistica_jogo_10 = estatistica_jogo_10[cols]
estatistica_jogo_11 = estatistica_jogo_11[cols]
estatistica_jogo_12 = estatistica_jogo_12[cols]
estatistica_jogo_13 = estatistica_jogo_13[cols]
estatistica_jogo_14 = estatistica_jogo_14[cols]
estatistica_jogo_15 = estatistica_jogo_15[cols]
estatistica_jogo_16 = estatistica_jogo_16[cols]
estatistica_jogo_17 = estatistica_jogo_17[cols]
estatistica_jogo_18 = estatistica_jogo_18[cols]
estatistica_jogo_19 = estatistica_jogo_19[cols]

def partidas_func(estatisticas):
    j = 1
    partidas = []
    for i in range(380):
        partidas.append(j)
        if ((i + 1)% 10) == 0:
            j = j + 1
    estatisticas['MW'] = partidas
    return estatisticas

estatistica_jogo_2 = partidas_func(estatistica_jogo_2)
estatistica_jogo_3 = partidas_func(estatistica_jogo_3)
estatistica_jogo_4 = partidas_func(estatistica_jogo_4)
estatistica_jogo_5 = partidas_func(estatistica_jogo_5)
estatistica_jogo_6 = partidas_func(estatistica_jogo_6)
estatistica_jogo_7 = partidas_func(estatistica_jogo_7)
estatistica_jogo_8 = partidas_func(estatistica_jogo_8)
estatistica_jogo_9 = partidas_func(estatistica_jogo_9)
estatistica_jogo_10 = partidas_func(estatistica_jogo_10)
estatistica_jogo_11 = partidas_func(estatistica_jogo_11)
estatistica_jogo_12 = partidas_func(estatistica_jogo_12)
estatistica_jogo_13 = partidas_func(estatistica_jogo_13)
estatistica_jogo_14 = partidas_func(estatistica_jogo_14)
estatistica_jogo_15 = partidas_func(estatistica_jogo_15)
estatistica_jogo_16 = partidas_func(estatistica_jogo_16)
estatistica_jogo_17 = partidas_func(estatistica_jogo_17)
estatistica_jogo_18 = partidas_func(estatistica_jogo_18)
estatistica_jogo_19 = partidas_func(estatistica_jogo_19)

estatistica_jogo_10.head()

# Juntando todos os conjuntos de dados em um dataset único
estatisticas = pd.concat([estatistica_jogo_4,
                          estatistica_jogo_2,
                          estatistica_jogo_3,
                          estatistica_jogo_5,
                          estatistica_jogo_6,
                          estatistica_jogo_7,
                          estatistica_jogo_8,
                          estatistica_jogo_9,
                          estatistica_jogo_10,
                          estatistica_jogo_11,
                          estatistica_jogo_12,
                          estatistica_jogo_13,
                          estatistica_jogo_15,
                          estatistica_jogo_16,
                          estatistica_jogo_17,
                          estatistica_jogo_18,
                          estatistica_jogo_19], ignore_index=True)


def pontos_form(string):
    sum = 0
    for letra in string:
        sum += pontos(letra)
    return sum

estatisticas['HTFormPtsStr'] = estatisticas['HM1'] + estatisticas['HM2'] + estatisticas['HM3'] + estatisticas['HM4'] + estatisticas['HM5']
estatisticas['ATFormPtsStr'] = estatisticas['AM1'] + estatisticas['AM2'] + estatisticas['AM3'] + estatisticas['AM4'] + estatisticas['AM5']

estatisticas['HTFormPts'] = estatisticas['HTFormPtsStr'].apply(pontos_form)
estatisticas['ATFormPts'] = estatisticas['ATFormPtsStr'].apply(pontos_form)

# Identificando Vitórias/Derrotas consecutivas
def vit_cons_3(string):
    if string[-3:] == 'WWW':
        return 1
    else:
        return 0
    
def vit_cons_5(string):
    if string == 'WWWWW':
        return 1
    else:
        return 0
    
def der_cons_3(string):
    if string[-3:] == 'LLL':
        return 1
    else:
        return 0
    
def der_cons_5(string):
    if string == 'LLLLL':
        return 1
    else:
        return 0
    
estatisticas['HTWinStreak3'] = estatisticas['HTFormPtsStr'].apply(vit_cons_3)
estatisticas['HTWinStreak5'] = estatisticas['HTFormPtsStr'].apply(vit_cons_5)
estatisticas['HTLossStreak3'] = estatisticas['HTFormPtsStr'].apply(der_cons_3)
estatisticas['HTLossStreak5'] = estatisticas['HTFormPtsStr'].apply(der_cons_5)

estatisticas['ATWinStreak3'] = estatisticas['ATFormPtsStr'].apply(vit_cons_3)
estatisticas['ATWinStreak5'] = estatisticas['ATFormPtsStr'].apply(vit_cons_5)
estatisticas['ATLossStreak3'] = estatisticas['ATFormPtsStr'].apply(der_cons_3)
estatisticas['ATLossStreak5'] = estatisticas['ATFormPtsStr'].apply(der_cons_5)

estatisticas.keys()

# Diferença de gols
estatisticas['HTGD'] = estatisticas['HTGS'] - estatisticas['HTGC']
estatisticas['ATGD'] = estatisticas['ATGS'] - estatisticas['ATGC']

# Diferença de pontos
estatisticas['DiffPts'] = estatisticas['HTP'] - estatisticas['ATP']
estatisticas['DiffFormPts'] = estatisticas['HTFormPts'] - estatisticas['ATFormPts']

# Padronizando os dados
cols = ['HTGD','ATGD','DiffPts','DiffFormPts','HTP','ATP']
estatisticas.MW = estatisticas.MW.astype(float)

for col in cols:
    estatisticas[col] = estatisticas[col] / estatisticas.MW

def vitoria_casa(string):
    if string == 'H':
        return 'H'
    else:
        return 'NH'
    
estatisticas['FTR'] = estatisticas.FTR.apply(vitoria_casa)

# Testing set (2015-16 season)
estatisticas_test = estatisticas[5700:]

estatisticas.to_csv(drive + "final_datasetLigaEspTeste.csv")
estatisticas_test.to_csv(drive+"test_LigaEsp.csv")